name: Alert_Recovery_Script_Execution_Bv

on:
  workflow_dispatch:
    inputs:
      function_name:
        type: string
        required: true
      AWS_REGION:
        description: 'AWS Regions (comma-separated)'
        required: false
      Instance:
        description: 'Instance IDs (comma-separated)'
        required: false
      cluster:
        description: 'Enter value of cluster'
        default: null
        required: false
      env:
        description: 'Enter value of env'
        default: null
        required: false

permissions:
  id-token: write
  contents: read
  actions: read
jobs:
  Recovery_workflow:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Checkout repository with library file
        uses: actions/checkout@v4
        with:
            repository: bvengineering/ActionsLibraryHub
            ref: main
            path: LibraryHub
            token: ${{secrets.TOKEN }} # Token needs to be added to the repository that has been created

      - name: Fetch data
        run: |
            label=$(python ./LibraryHub/EmodbLib.py getVpcByUniverse "${{inputs.env}}")
            account_id=$(python ./LibraryHub/EmodbLib.py getAccountIdByUniverse "${{inputs.env}}")
            echo "EnvTag=$label" >> $GITHUB_ENV;echo "AccId=$account_id" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
            role-to-assume: arn:aws:iam::${{env.AccId}}:role/deployCFNResource #if possible create new IAM Role and replace here
            role-session-name: recoveryScriptSession
            aws-region: ${{ inputs.AWS_REGION }}

      - name: Make script executable
        run: chmod +x ./recoveryScripts.sh

      - name: Run script
        run: |
          # Split the input parameters into arrays without quotes
          IFS=',' read -ra regions <<< "${{ inputs.AWS_REGION }}"
          IFS=',' read -ra instances <<< "${{ inputs.Instance }}"

          for i in "${!regions[@]}"; do
            region="${regions[i]}"
            instance="${instances[i]}"
            echo "Executing ${{inputs.function_name}}"
            ./recoveryScripts.sh "${{inputs.function_name}}" "$region" "$instance" "${{inputs.cluster}}" "${{inputs.env}}" &
          done

          wait