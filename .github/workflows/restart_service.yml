name: Restart service

on:
  workflow_dispatch:
    inputs:
      AWS_REGION:
        description: 'AWS Regions (comma-separated)'
        required: true
      Instance:
        description: 'Instance IDs (comma-separated)'
        required: true
      Universe:
        type: string
        required: false

permissions:
  id-token: write
  contents: read
  actions: read
jobs:
  run-ssm-command:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #       role-to-assume: arn:aws:iam::549050352176:role/TestingDataDog_role
      #       role-session-name: restartservice
      #       aws-region: ${{inputs.AWS_REGION}}
      - name: Make ssmcmd.sh executable
        run: chmod +x ./ssmcmd.sh

      - name: Run SSM Command
        run: |
          # Split the input parameters into arrays without quotes
          IFS=',' read -ra regions <<< "${{ inputs.AWS_REGION }}"
          IFS=',' read -ra instances <<< "${{ inputs.Instance }}"

          # Ensure the arrays have the same length
          if [ ${#regions[@]} -ne ${#instances[@]} ]; then
            echo "Error: The number of regions does not match the number of instances."
            exit 1
          fi

          # Process each region and instance ID pair in parallel
          for i in "${!regions[@]}"; do
            region="${regions[i]}"
            instance="${instances[i]}"
            echo "Processing region: $region, instance: $instance"
            ./ssmcmd.sh "$region" "$instance" &
          done

          # Wait for all commands to finish
          wait

           
  
        
           

      
      # - name: Checkout repository with library file
      #   uses: actions/checkout@v4
      #   with:
      #     repository: bvengineering/ActionsLibraryHub
      #     ref: main
      #     path: LibraryHub
      #     token: ${{ secrets.TOKEN }}

      # - name: Fetch data 
      #   run: |
      #       label=$(python ./LibraryHub/EmodbLib.py getVpcByUniverse "${{inputs.Universe}}")
      #       account_id=$(python ./LibraryHub/EmodbLib.py getAccountIdByUniverse "${{inputs.Universe}}")
      #       echo "EnvTag=$label" >> $GITHUB_ENV;echo "AccId=$account_id" >> $GITHUB_ENV
            
      # - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #       role-to-assume: arn:aws:iam::${{env.AccId}}:role/deployCFNResource
      #       role-session-name: emojiServiceSession
      #       aws-region: ${{ inputs.AWS_REGION }}

      # - name: Printing using sh
      #   run: |
      #     chmod +x ./list_buckets.sh
      #     ./list_buckets.sh
    
      # - name: Printing using py
      #   run: |
      #     python test.py

      # - name: Alert to slack
      #   uses: 8398a7/action-slack@v3
      #   if: ${{ always() }}
      #   with:
      #     status: ${{ job.status }}
      #     fields: repo,message,job,workflow
      #     author_name: The workflow at ${{ github.repository }} on branch ${{ github.ref_name }} is ${{ job.status }}
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      # - name: Send PagerDuty alert on failure
      #   if: ${{ failure() }}
      #   uses: Entle/action-pagerduty-alert@0.2.0
      #   with:
      #     pagerduty-integration-key: '${{ secrets.PD_KEY }}'
      #     pagerduty-dedup-key: github_workflow_failed